usethis::use_package("RcppSimdJson")
usethis::use_package("readr")
usethis::use_package("data.table")
usethis::use_package("parallel")
usethis::use_package("purrr")
devtools::check()
usethis::use_ccby_license()
devtools::check()
devtools::check()
devtools::check()
usethis::use_package("stringi")
usethis::use_package("purrr")
usethis::use_package("tidytable")
usethis::use_package("data.table")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
install.packages("roxygen")
devtools::check()
roxygen2::roxygenize()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
roxygen2::roxygenize()
devtools::check()
usethis::use_package("lubridate")
devtools::check()
devtools::check()
devtools::check()
install.packages("roxygen2")
devtools::check()
usethis::use_package("pbapply")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
roxygen2::roxygenize()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_package("utils", type = "Imports")
devtools::check()
usethis::use_package("tools")
devtools::check()
?stop()
devtools::check()
devtools::check()
usethis::use_package("purrr")
usethis::use_package("tictoc")
usethis::use_dev_package("nicolarighetti/CooRTweet", type = "Imports", remote = "github::nicolarighetti/CooRTweet")
usethis::use_dev_package("CooRTweet", type = "Imports", remote = "github::nicolarighetti/CooRTweet")
devtools::check()
l2norm <- function(x)sqrt(sum(x^2))
v <- c(1,.4.,-.7,.9)
v <- c(1,.4,-.7,.9)
l2norm(v)
v/l2norm(v)
?normalize
getAnywhere(dictvectoR::normalize)
library(dictvectoR)
getAnywhere(normalize)
v2 <- c(.2, .3, .4, 0)
m <- matrix(v, v2)
m <- as.matrix(v, v2)
m
m <- as.matrix(c(v, v2))
m
?matrix
matrix(c(v, v2),
nrow = 2)
m <- matrix(c(v, v2),
nrow = 2)
m/l2norm(m)
v/l2norm(v)
normalise <- function(x) x/l2norm(x)
apply(m, 1, normalise)
t(apply(m, 1, normalise))
normalise(v)
normalise(v2)
t(apply(m, 2, normalise))
apply(m, 2, normalise)
# Step 1: Create a matrix of 3 rows, 5 columns with values between -1 and 1
set.seed(123)  # Setting seed for reproducibility
mat <- matrix(runif(15, min = -1, max = 1), nrow = 3, ncol = 5)
# Step 2: Write a function that normalizes each vector to its L2 norm
normalize_L2 <- function(vec) {
return(vec / sqrt(sum(vec^2)))
}
# Step 3: Apply the normalization row-wise
normalized_mat <- t(apply(mat, 1, normalize_L2))
# Step 4: Validate that this produces the same result when applied to each vector individually
# Apply normalization individually to each row and compare
individual_normalized_mat <- matrix(NA, nrow = nrow(mat), ncol = ncol(mat))
for (i in 1:nrow(mat)) {
individual_normalized_mat[i, ] <- normalize_L2(mat[i, ])
}
# Check if the two matrices are identical
identical(normalized_mat, individual_normalized_mat)
# Check if the two matrices are identical
identical(normalized_mat, individual_normalized_mat)
print("Original Matrix:")
print(mat)
# Step 1: Create a matrix of 3 rows, 5 columns with values between -1 and 1
set.seed(123)  # Setting seed for reproducibility
mat <- matrix(runif(15, min = -1, max = 1), nrow = 2, ncol = 4)
# Step 2: Write a function that normalizes each vector to its L2 norm
normalize_L2 <- function(vec) {
return(vec / sqrt(sum(vec^2)))
}
# Step 3: Apply the normalization row-wise
normalized_mat <- t(apply(mat, 1, normalize_L2))
# Step 4: Validate that this produces the same result when applied to each vector individually
# Apply normalization individually to each row and compare
individual_normalized_mat <- matrix(NA, nrow = nrow(mat), ncol = ncol(mat))
for (i in 1:nrow(mat)) {
individual_normalized_mat[i, ] <- normalize_L2(mat[i, ])
}
# Check if the two matrices are identical
identical(normalized_mat, individual_normalized_mat)
print("Original Matrix:")
print(mat)
print(normalized_mat)
print(individual_normalized_mat)
print(identical(normalized_mat, individual_normalized_mat))
# Step 1: Create a matrix of 3 rows, 5 columns with values between -1 and 1
set.seed(123)  # Setting seed for reproducibility
mat <- matrix(runif(15, min = -1, max = 1), nrow = 3, ncol = 4)
mat <- matrix(runif(12, min = -1, max = 1), nrow = 3, ncol = 4)
# Step 2: Write a function that normalizes each vector to its L2 norm
normalize_L2 <- function(vec) {
return(vec / sqrt(sum(vec^2)))
}
# Step 3: Apply the normalization row-wise
normalized_mat <- t(apply(mat, 1, normalize_L2))
# Step 4: Validate that this produces the same result when applied to each vector individually
# Apply normalization individually to each row and compare
individual_normalized_mat <- matrix(NA, nrow = nrow(mat), ncol = ncol(mat))
for (i in 1:nrow(mat)) {
individual_normalized_mat[i, ] <- normalize_L2(mat[i, ])
}
# Check if the two matrices are identical
identical(normalized_mat, individual_normalized_mat)
print(mat)
print(normalized_mat)
# Step 1: Create a matrix of 3 rows, 5 columns with values between -1 and 1
set.seed(123)  # Setting seed for reproducibility
mat <- matrix(runif(12, min = -10, max = 10), nrow = 3, ncol = 4)
# Step 2: Write a function that normalizes each vector to its L2 norm
normalize_L2 <- function(vec) {
return(vec / sqrt(sum(vec^2)))
}
# Step 3: Apply the normalization row-wise
normalized_mat <- t(apply(mat, 1, normalize_L2))
# Step 4: Validate that this produces the same result when applied to each vector individually
# Apply normalization individually to each row and compare
individual_normalized_mat <- matrix(NA, nrow = nrow(mat), ncol = ncol(mat))
for (i in 1:nrow(mat)) {
individual_normalized_mat[i, ] <- normalize_L2(mat[i, ])
}
# Check if the two matrices are identical
identical(normalized_mat, individual_normalized_mat)
print(mat)
print(normalized_mat)
print(individual_normalized_mat)
print(identical(normalized_mat, individual_normalized_mat))
mat[1]
mat[,1]
mat[1,]
mat[1,] |> normalize_L2()
normalise <- function(x) x/sqrt(sum(x^2))
normalise(v)
normalise(v2)
t(apply(m, 1, normalise))
v
m
v
m <- matrix(append(v, v2),
nrow = 2)
m
v
matrix(v)
matrix(v, nrow = 1)
rbind(
matrix(v, nrow = 1),
matrix(v2, nrow = 1))
m <- rbind(
matrix(v, nrow = 1),
matrix(v2, nrow = 1))
m
v
normalise <- function(x) x/sqrt(sum(x^2))
normalise(v)
normalise(v2)
t(apply(m, 1, normalise))
devtools::check()
devtools::chekc()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
